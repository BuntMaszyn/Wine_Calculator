{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["WineCalculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bo","juice","water","waterAdd","sugarAdd","bx","allCalculated","submitHandle","e","preventDefault","_this$state","console","log","pop","boPop","sugarInitial","sugarInitialVolume","waterInitial","waterInitialVolume","wineInitialKgVolume","sugarInLiterOfInitialWine","allSugarInInitialWine","sugarAddVolume","sugarWhole","popWithAdditions","volumeOfAllUsed","potentialSugarPerLiter","potentialAlkoToProduce","popAlko","bxWithPops","sugarRest","allFermentedSugarPerLiter","finalAlkoVol","setState","parseFloat","window","scrollTo","myRef","current","offsetTop","setBo","val","target","value","Number","isNaN","alert","document","querySelector","setJuice","setWater","setWaterAdd","setSugarAdd","setBx","reset","React","createRef","react_default","a","createElement","Fragment","className","onSubmit","type","onChange","defaultValue","onBlur","onClick","App_PreFermentation","App_Sweetness","App_SweetnessInitial","ref","App_Report","Component","PreFermentation","href","toFixed","style","border","borderRadius","lineHeight","width","justifyContent","backgroundColor","display","alignItems","margin","Sweetness","objectSpread","background","transform","SweetnessInitial","Report","Math","floor","App","App_WineCalculator","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb58c2c8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\n\nclass WineCalculator extends Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef(); // Create a ref object\n  }\n\n  state = {\n    bo: 26,\n    juice: 10,\n    water: 0,\n    waterAdd: 0,\n    sugarAdd: 0,\n    bx: 0,\n    // success: false,\n    allCalculated: false\n  };\n\n  submitHandle = e => {\n    e.preventDefault();\n    const { bo, juice, water, waterAdd, sugarAdd, bx } = this.state;\n    console.log(this.state);\n\n    //Etap 1-3 SAM SOK I WODA\n    // poprawka na niecukry przed dosładzaniem\n    let pop = 4 * (juice / (juice + water));\n    console.log(\"poprawka: \" + pop);\n    // poprawiony balling poczatkowy\n    let boPop = bo - pop;\n    console.log(\"Blg o skorygowany: \" + boPop);\n\n    //PARAMETRY ROZTWORU\n    //cukier [g/kg roztworu]\n    let sugarInitial = boPop * 10;\n    //cukier [ml/kg roztworu]\n    let sugarInitialVolume = sugarInitial * 0.62;\n    //woda [g/kg roztworu]\n    let waterInitial = 1000 - sugarInitial;\n    //woda [ml/kg roztworu]\n    let waterInitialVolume = waterInitial;\n    //objetosc kilograma roztworu [ml/kg roztworu]\n    let wineInitialKgVolume = waterInitialVolume + sugarInitialVolume;\n    console.log(\n      \"cukier g/l: \" + sugarInitial,\n      \"cukier ml: \" + sugarInitialVolume,\n      \"woda g/l ml: \" + waterInitial,\n      \"objętość kg roztworu: \" + wineInitialKgVolume\n    );\n    // ilość cukru w litrze nastawu\n    let sugarInLiterOfInitialWine = (sugarInitial * 1000) / wineInitialKgVolume;\n    //ilość cukru w nastawie\n    let allSugarInInitialWine = sugarInLiterOfInitialWine * (juice + water);\n    console.log(\n      \"ilość cukru w litrze nastawu: \" + sugarInLiterOfInitialWine,\n      \"ilość cukru w nastawie: \" + allSugarInInitialWine\n    );\n\n    // DOSŁADZANIE I DOLEWANIE - POPRAWKA NA NIECUKRY\n    // objetosc dosypanego cukru\n    let sugarAddVolume = (sugarAdd / 1000) * 0.62;\n    // teoretyczna ilosc cukru w nastawie po doslodzeniu\n    let sugarWhole = allSugarInInitialWine + sugarAdd;\n    // skorygowana poprawka na niecukry uwzględniająca dodaną wodę i dosładzanie\n    let popWithAdditions =\n      4 * (juice / (juice + waterAdd + water + sugarAddVolume));\n    console.log(\n      \"skorygowana poprawka na niecukry uwzględniająca dodaną wodę i dosładzanie: \" +\n        popWithAdditions\n    );\n    // ZAKOŃCZENIE FERMENTACJI - MOC, POPRAWKA NA ALKOHOL, CUKRY RESZTKOWE\n    let volumeOfAllUsed = water + juice + sugarAddVolume + waterAdd;\n    let potentialSugarPerLiter = sugarWhole / volumeOfAllUsed;\n    let potentialAlkoToProduce = potentialSugarPerLiter / 16.9;\n    let popAlko = potentialAlkoToProduce * 0.1974;\n    if (potentialAlkoToProduce !== 0) {\n      popAlko += 1.3;\n    }\n    let bxWithPops = bx - popWithAdditions + popAlko;\n    let sugarRest = bxWithPops * 10;\n    let allFermentedSugarPerLiter = potentialSugarPerLiter - sugarRest;\n    let finalAlkoVol = allFermentedSugarPerLiter / 16.9;\n    console.log(finalAlkoVol);\n\n    this.setState(\n      {\n        pop: parseFloat(pop),\n        boPop: parseFloat(boPop),\n        sugarInitial: parseFloat(sugarInitial),\n        sugarInitialVolume: parseFloat(sugarInitialVolume),\n        waterInitial: parseFloat(waterInitial),\n        waterInitialVolume: parseFloat(waterInitialVolume),\n        wineInitialKgVolume: parseFloat(wineInitialKgVolume),\n        sugarInLiterOfInitialWine: parseFloat(sugarInLiterOfInitialWine),\n        allSugarInInitialWine: parseFloat(allSugarInInitialWine),\n        sugarAddVolume: parseFloat(sugarAddVolume),\n        sugarWhole: parseFloat(sugarWhole),\n        popWithAdditions: parseFloat(popWithAdditions),\n        volumeOfAllUsed: parseFloat(volumeOfAllUsed),\n        potentialSugarPerLiter: parseFloat(potentialSugarPerLiter),\n        potentialAlkoToProduce: parseFloat(potentialAlkoToProduce),\n        popAlko: parseFloat(popAlko),\n        bxWithPops: parseFloat(bxWithPops),\n        sugarRest: parseFloat(sugarRest),\n        allFermentedSugarPerLiter: parseFloat(allFermentedSugarPerLiter),\n        finalAlkoVol: parseFloat(finalAlkoVol),\n        allCalculated: true\n      },\n      () => {\n        window.scrollTo(0, this.myRef.current.offsetTop);\n      }\n    );\n\n    console.log(this.state);\n  };\n\n  setBo = e => {\n    // console.log(e.target.value);\n    let val = parseFloat(e.target.value);\n    // console.log(`Bo ${val}`);\n    // console.log(typeof val);\n    if (Number.isNaN(val) || val > 30 || val < -4) {\n      alert(\n        \"Błąd: początkowa gęstość nie może być większa od 30 ani mniejsza od -4 Blg, pole nie może być puste\"\n      );\n      document.querySelector(\".bo\").value = 0;\n    } else {\n      this.setState({\n        bo: val\n      });\n    }\n  };\n\n  setJuice = e => {\n    let val = parseFloat(e.target.value);\n    console.log(val);\n    if (Number.isNaN(val) || val < 0) {\n      alert(\"Błąd: pole nie może być puste, wartości ujemne są wykluczone\");\n    } else {\n      console.log(val);\n      this.setState({\n        juice: val\n      });\n    }\n  };\n\n  setWater = e => {\n    let val = parseFloat(e.target.value);\n    if (Number.isNaN(val) || val < 0) {\n      alert(\"Błąd: pole nie może być puste, wartości ujemne są wykluczone\");\n    } else {\n      this.setState({\n        water: val\n      });\n    }\n  };\n\n  setWaterAdd = e => {\n    let val = parseFloat(e.target.value);\n    if (Number.isNaN(val) || val < 0) {\n      alert(\"Błąd: pole nie może być puste, wartości ujemne są wykluczone\");\n    } else {\n      this.setState({\n        waterAdd: val\n      });\n    }\n  };\n\n  setSugarAdd = e => {\n    let val = parseFloat(e.target.value);\n    if (Number.isNaN(val) || val < 0) {\n      alert(\"Błąd: pole nie może być puste, wartości ujemne są wykluczone\");\n    } else {\n      this.setState({\n        sugarAdd: val\n      });\n    }\n  };\n\n  setBx = e => {\n    let val = parseFloat(e.target.value);\n    if (Number.isNaN(val) || val > 30 || val < -4) {\n      alert(\n        \"Błąd: końcowa gęstość nie może być większa od 30 ani mniejsza od -4 Blg, pole nie może być puste\"\n      );\n      document.querySelector(\".bx\").value = 0;\n    } else {\n      this.setState({\n        bx: val\n      });\n    }\n  };\n\n  reset = e => {\n    e.preventDefault();\n\n    // document.querySelector(\".reportRef\").style.display = \"none\";\n    this.setState({\n      bo: 26,\n      juice: 10,\n      water: 0,\n      waterAdd: 0,\n      sugarAdd: 0,\n      bx: 0,\n      allCalculated: false\n      // sugarRest: false\n    });\n    document.querySelector(\".bo\").value = this.state.bo;\n    document.querySelector(\".bx\").value = this.state.bx;\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"container\">\n          <h1 className=\"header\"> Kalkulator Winiarski</h1>\n          <div className=\"wrapper\">\n            <form className=\"form\" onSubmit={this.submitHandle}>\n              <label> 1) Ilość soku w nastawie [l]:</label>\n              <input\n                type=\"number\"\n                value={this.state.juice}\n                onChange={this.setJuice}\n              />\n              <label> 2) Ilość wody w nastawie [l]:</label>\n              <input\n                type=\"number\"\n                value={this.state.water}\n                onChange={this.setWater}\n              />\n              <label>\n                {\" \"}\n                3) Wskazania gęstościomierzą przed fermentacją [Blg]:\n              </label>\n              <input\n                className=\"bo\"\n                type=\"number\"\n                defaultValue={this.state.bo}\n                onBlur={this.setBo}\n              />\n\n              <label> 4) Cukier dodany przed/podczas fermentacji [g]:</label>\n              <input\n                type=\"number\"\n                value={this.state.sugarAdd}\n                onChange={this.setSugarAdd}\n              />\n              <label> 5) Woda dodana podczas fermentacji [l]:</label>\n              <input\n                type=\"number\"\n                value={this.state.waterAdd}\n                onChange={this.setWaterAdd}\n              />\n              <label>\n                {\" \"}\n                6) Wskazania gęstościomierzą po zakończeniu fermentacji [Blg]:\n              </label>\n              <input\n                className=\"bx\"\n                type=\"number\"\n                defaultValue={this.state.bx}\n                onBlur={this.setBx}\n              />\n              <div />\n              <button className=\"button\" type=\"submit\">\n                Oblicz\n              </button>\n              <div />\n              <button className=\"button button2\" onClick={this.reset}>\n                Reset\n              </button>\n            </form>\n\n            <div className=\"animationContainer flex\">\n              <PreFermentation props={this.state} />\n            </div>\n\n            <div className=\"sweetContainer flex\">\n              {this.state.allCalculated ? (\n                <Sweetness props={this.state.sugarRest} />\n              ) : (\n                <SweetnessInitial props={this.state.sugarRest} />\n              )}\n            </div>\n\n            <div ref={this.myRef} className=\"reportRef\">\n              {this.state.allCalculated ? (\n                <Report props={this.state} />\n              ) : (\n                <div />\n              )}\n            </div>\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nconst PreFermentation = e => {\n  console.log(e);\n  return (\n    <>\n      <div className=\"reportList informationList\">\n        <ul>\n          <h3>Uwagi:</h3>\n          <li>\n            Pomiarów gęstościomierzem należy dokonać w tej samej temperaturze,\n            nalepiej <sup>o</sup>20 C, w&nbsp;niewzburzonym nastawie, po\n            ustabilizowaniu się pozycji pływaka\n          </li>\n          <li>\n            Kalkulator podaje jedynie wyniki prawdopodobne ustalone na podstawie\n            wzorów empirycznych. Wyniki bezwzględne są możliwe do uzyskania za\n            pomocą badań laboratoryjnych (np. destylacji)\n          </li>\n          <p>&nbsp;</p>\n          <p>\n            &#x24B8; Rafał Baran (visit my GitHub projects) =>{\" \"}\n            <a href=\"https://github.com/BuntMaszyn\">\n              www.Github.com/BuntMaszyn\n            </a>\n          </p>\n        </ul>\n      </div>\n      <div className=\"circle\">\n        <div className=\"wave\" />\n      </div>\n      {e.props.allCalculated ? (\n        <h1>Uzyskałeś {e.props.finalAlkoVol.toFixed(2)} % alkoholu i wino:</h1>\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n\nconst style = {\n  border: \"1px solid black\",\n  borderRadius: \"50%\",\n  lineHeight: \"3em\",\n  width: \"10em\",\n  justifyContent: \"center\",\n  backgroundColor: \"#a6d2ff\",\n  display: \"flex\",\n  alignItems: \"center\",\n  margin: \"1em\"\n};\n\n// wina wytrawne mają zawartość cukru poniżej 4 g/l, półwytrawne do 12 g/l, półsłodkie do 45 g/l, a słodkie powyżej tej normy\n\nconst Sweetness = e => {\n  console.log(e);\n  let a = e.props;\n  return (\n    <>\n      {a <= 4 ? (\n        <div\n          style={{\n            ...style,\n            background: \"red\",\n            transform: \"scale(1.4)\"\n          }}\n        >\n          Wytrawne\n        </div>\n      ) : (\n        <div style={{ ...style, background: \"#a6d2ff\" }}>Wytrawne</div>\n      )}\n      {a > 4 && a <= 12 ? (\n        <div style={{ ...style, background: \"red\", transform: \"scale(1.4)\" }}>\n          Półwytrawne\n        </div>\n      ) : (\n        <div style={{ ...style, background: \"#a6d2ff\" }}>Półwytrawne</div>\n      )}\n      {a > 12 && a <= 45 ? (\n        <div style={{ ...style, background: \"red\", transform: \"scale(1.4)\" }}>\n          Półsłodkie\n        </div>\n      ) : (\n        <div style={{ ...style, background: \"#a6d2ff\" }}>Półsłodkie</div>\n      )}\n      {a > 45 ? (\n        <div style={{ ...style, background: \"red\", transform: \"scale(1.4)\" }}>\n          Słodkie\n        </div>\n      ) : (\n        <div style={{ ...style, background: \"#a6d2ff\" }}>Słodkie</div>\n      )}\n    </>\n  );\n};\n\nconst SweetnessInitial = e => {\n  return (\n    <>\n      <div style={{ ...style, background: \"#a6d2ff\" }}>Wytrawne</div>\n      <div style={{ ...style, background: \"#a6d2ff\" }}>Półwytrawne</div>\n      <div style={{ ...style, background: \"#a6d2ff\" }}>Półsłodkie</div>\n      <div style={{ ...style, background: \"#a6d2ff\" }}>Słodkie</div>\n    </>\n  );\n};\n\nconst Report = e => {\n  console.log(e);\n  return (\n    <>\n      <div className=\"reportContainer flex\">\n        <div className=\"reportList\">\n          <h3>Winiarzu, nastawiłeś wino o następujących parametrach:</h3>\n          <ul>\n            <li>Sok owocowy: {e.props.juice} l</li>\n            {e.props.water !== 0 || e.props.water !== \"\" ? (\n              <li>Woda: {e.props.water} l</li>\n            ) : (\n              <li>nie dodano wody</li>\n            )}\n            <li>Wskazania gęstościomierza: {e.props.bo} Blg</li>\n            <li>Poprawka na niecukry: {e.props.pop.toFixed(2)} Blg </li>\n            <li>\n              W jednym kilogramie nastawu znajduje się{\" \"}\n              {Math.floor(e.props.sugarInitial)} g czyli{\" \"}\n              {Math.floor(e.props.sugarInitialVolume)} ml cukru oraz{\" \"}\n              {Math.floor(e.props.waterInitialVolume)} ml wody\n            </li>\n            <li>\n              Całkowita ilość cukru w {e.props.water + e.props.juice} l nastawu\n              to: {Math.floor(e.props.allSugarInInitialWine)} g{\" \"}\n            </li>\n          </ul>\n          {e.props.sugarAdd !== 0 || e.props.waterAdd !== 0 ? (\n            <div className=\"reportList optionalReport\">\n              <h3>Do początkowego nastawu dodałeś:</h3>\n              <ul>\n                {e.props.sugarAdd !== 0 ? (\n                  <li>Dosłodzono cukrem w ilości: {e.props.sugarAdd} g</li>\n                ) : (\n                  <li>Nie dosładzano</li>\n                )}\n                {e.props.waterAdd !== 0 ? (\n                  <li>Dolano wody w ilości: {e.props.waterAdd} l</li>\n                ) : (\n                  <li>Nie dolewano wody</li>\n                )}\n                {e.props.pop !== e.props.popWithAdditions ? (\n                  <li>\n                    {console.log(e.props.popWithAdditions.toFixed(2), \"ada\")}\n                    Skorygowana poprawka na niecukry:{\" \"}\n                    {e.props.popWithAdditions.toFixed(2)} Blg\n                  </li>\n                ) : (\n                  <></>\n                )}\n                <li>\n                  Objętość z uwględnieniem dodatków:{\" \"}\n                  {e.props.volumeOfAllUsed.toFixed(2)} l\n                </li>\n              </ul>\n            </div>\n          ) : (\n            <div />\n          )}\n        </div>\n\n        <div className=\"reportList\">\n          <h3>Po fermentacji:</h3>\n          <ul>\n            <li>\n              W litrze nastawu było:{\" \"}\n              {Math.floor(e.props.potentialSugarPerLiter)} g cukru co dawało\n              potencjalną możliwość uzyskania{\" \"}\n              {e.props.potentialAlkoToProduce.toFixed(2)} % alkoholu\n            </li>\n            <li>\n              Wskazania gęstościomierza po fermentacji: {e.props.bx.toFixed(2)}{\" \"}\n              Blg\n            </li>\n            <li>\n              Poprawka gęstościowa na zawartość alkoholu:{\" \"}\n              {e.props.popAlko.toFixed(2)} Blg{\" \"}\n            </li>\n            <li>\n              Skorygowane wskazanie gęstościomierza:{\" \"}\n              {e.props.bxWithPops.toFixed(2)} Blg{\" \"}\n            </li>\n            <li>\n              Cukier przefermentowany{\" \"}\n              {e.props.allFermentedSugarPerLiter.toFixed(2)} g/l{\" \"}\n            </li>\n            <li>\n              Cukier resztkowy (słodkość) {e.props.sugarRest.toFixed(2)} g/l{\" \"}\n            </li>\n            <li>Finalna moc wina {e.props.finalAlkoVol.toFixed(2)} % alk </li>\n          </ul>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst App = () => {\n  return (\n    <>\n      <WineCalculator />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}